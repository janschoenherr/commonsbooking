{"version":3,"sources":["../node_modules/tiny-emitter/index.js","../node_modules/matches-selector/index.js","../node_modules/throttleit/index.js","../node_modules/array-parallel/index.js","../src/get-number.js","../src/point.js","../src/rect.js","../src/classes.js","../src/shuffle-item.js","../src/computed-size.js","../src/get-number-style.js","../src/sorter.js","../src/on-transition-end.js","../src/array-max.js","../src/array-min.js","../src/layout.js","../src/hyphenate.js","../src/shuffle.js"],"names":["parseFloat","Point","getNumber","a","b","Rect","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","id","ShuffleItem","Classes","classes","Object","obj","INITIAL","position","top","visibility","willChange","DIRECTION","ltr","left","rtl","right","before","opacity","after","transitionDelay","value","element","document","e","window","styles","testComputedSize","style","n","array","i","Math","temp","defaults","reverse","by","compare","randomize","key","opts","original","Array","revert","arr","valA","valB","transitions","eventName","count","uniqueId","listener","evt","cancelTransitionEnd","callback","columnSpan","itemWidth","available","columns","arrayMax","positions","minPosition","arrayMin","len","itemSize","gridSize","total","threshold","buffer","span","getColumnSpan","setY","getAvailablePositions","shortColumnIndex","getShortColumn","point","setHeight","rowMap","itemRects","itemRect","rects","rows","centeredRows","lastItem","end","offset","containerWidth","finalRects","canMove","newRects","newRect","r","noOverlap","hasOverlap","intersects","intersectingRect","rowIndex","items","m1","Shuffle","TinyEmitter","options","el","layout","containerCss","resizeFunction","option","category","lastFilter","collection","set","visible","hidden","item","attr","keys","JSON","speed","easing","positionProps","cssProps","hyphenate","properties","matches","children","sorter","size","getNumberStyle","width","gutter","columnWidth","calculatedColumns","index","data","itemPositions","itemsData","getItemPosition","getCenteredPositions","sign","x","y","onTransitionEnd","itemCallback","done","hasSpeed","hasQueue","callbacks","parallel","objects","elements","sortOptions","lastSort","isOnlyLayout","allItems","sortedItems","allSortedItemsSet","isNewItem","applyHiddenState","isUpdateLayout","arrayUnique","oldItems","handleLayout","includeMargins","height","marginLeft","marginRight","marginTop","marginBottom","zero","duration","delay","LAYOUT","REMOVED","ANY","ALL","group","itemSelector","sizer","gutterWidth","delimiter","columnThreshold","initialSort","throttle","throttleTime","staggerAmount","staggerAmountMax","useTransforms","filterMode","isCentered","isRTL","roundTransforms"],"mappings":"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","sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width\n      && a.top < b.top + b.height && b.top < a.top + a.height);\n  }\n}\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element, isRTL) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Set correct direction of item\n     */\n    this.isRTL = isRTL;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.applyCss(this.isRTL ? ShuffleItem.Css.DIRECTION.rtl : ShuffleItem.Css.DIRECTION.ltr);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  DIRECTION: {\n    ltr: {\n      left: 0,\n    },\n    rtl: {\n      right: 0,\n    },\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","let value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  value = window.getComputedStyle(e, null).width === '10px';\n\n  element.removeChild(e);\n\n  return value;\n};\n","import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(\n  element, style,\n  styles = window.getComputedStyle(element, null),\n) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft)\n      + getNumber(styles.paddingRight)\n      + getNumber(styles.borderLeftWidth)\n      + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop)\n      + getNumber(styles.paddingBottom)\n      + getNumber(styles.borderTopWidth)\n      + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  // eslint-disable-next-line prefer-object-spread\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({\n  itemSize, positions, gridSize, total, threshold, buffer,\n}) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some((r) => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some((itemRect) => rects.some((r) => {\n        const intersects = Rect.intersects(itemRect, r);\n        if (intersects) {\n          intersectingRect = r;\n        }\n        return intersects;\n      }));\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex((items) => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort((a, b) => (a.id - b.id))\n    .map((itemRect) => new Point(itemRect.left, itemRect.top));\n}\n","/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n","import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport {\n  getItemPosition,\n  getColumnSpan,\n  getAvailablePositions,\n  getShortColumn,\n  getCenteredPositions,\n} from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    // eslint-disable-next-line prefer-object-spread\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (this.options.delimeter) {\n      this.options.delimiter = this.options.delimeter;\n    }\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle\n      ? this.options.throttle(resizeFunction, this.options.throttleTime)\n      : resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n    // Loop through each item and use provided function to determine\n    // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimiter\n      ? attr.split(this.options.delimiter)\n      : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map((k) => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = speed + 'ms';\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter((el) => matches(el, this.options.itemSelector))\n      .map((el) => new ShuffleItem(el, this.options.isRTL));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter((item) => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter((item) => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n    // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n    // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n    // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n    // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns)\n        < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map((item) => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    // eslint-disable-next-line prefer-object-spread\n    const styles = Object.assign({}, styleObject);\n\n    if (this.options.useTransforms) {\n      const sign = this.options.isRTL ? '-' : '';\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${sign}${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      if (this.options.isRTL) {\n        styles.right = item.point.x + 'px';\n      } else {\n        styles.left = item.point.x + 'px';\n      }\n      styles.top = item.point.y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n    // A call to layout happened, but none of the newly visible items will\n    // change position or the transition duration is zero, which will not trigger\n    // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map((obj) => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map((obj) => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n   */\n  update(isOnlyLayout = false) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map((el) => new ShuffleItem(el, this.options.isRTL));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = (item) => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map((element) => this.getItemByElement(element))\n      .filter((item) => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter((item) => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find((item) => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Attempt to align grid items to right.\n  isRTL: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n"],"file":"vendor.js"}